{
  "name": "Mindustry Program",
  "fileTypes": [
    "mpro"
  ],
  "scopeName": "source.mpro",
  "foldingStartMarker": "/\\*\\*|\\{\\s*$",
  "foldingStopMarker": "\\*\\*/|^\\s*\\}",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "match": "\\b(break|continue|do|else|for|if|return|while)\\b",
      "name": "keyword.control.mpro"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#at_constants"
    },
    {
      "include": "#opeartors"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#strings"
    },
    {
      "name": "punctuation.terminator.statement.mpro",
      "match": "\\;"
    },
    {
      "name": "meta.delimiter.object.comma.mpro",
      "match": ",[ |\\t]*"
    },
    {
      "name": "meta.dot.mpro",
      "match": "\\.(?![0-9])"
    },
    {
      "include": "#brace_block"
    },
    {
      "include": "#bracket_block"
    },
    {
      "include": "#paren_block"
    },
    {
      "name": "meta.function.mpro",
      "begin": "\\b(function)\\s+(?=[[:alpha:]_][[:alnum:]_]*)\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "storage.type.function.mpro"
        }
      },
      "end": "(?<=\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.parameters.begin.mpro"
        }
      },
      "patterns": [
        {
          "contentName": "entity.name.function.mpro",
          "begin": "(?=[[:alpha:]_][[:alnum:]_]*)",
          "end": "(?![[:alnum:]_])",
          "patterns": [
            {
              "include": "#illegal_names"
            }
          ]
        },
        {
          "contentName": "meta.function.parameters.mpro",
          "begin": "(\\()",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.parameters.begin.mpro"
            }
          },
          "end": "(?=\\))",
          "patterns": [
            {
              "include": "#keyword_arguments"
            },
            {
              "include": "#illegal_names"
            },
            {
              "match": "\\b(?:([[:alpha:]_][[:alnum:]_]*))\\s*(?:(,)|(?=[\\n\\)]))",
              "captures": {
                "1": {
                  "name": "variable.parameter.function.language.mpro"
                },
                "2": {
                  "name": "punctuation.separator.parameters.mpro"
                },
                "3": {
                  "name": "punctuation.separator.parameters.mpro"
                }
              }
            }
          ]
        },
        {
          "begin": "(\\))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.parameters.end.mpro"
            }
          },
          "end": "(?<=\\))",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    {
      "match": "\\bfunction\\b",
      "name": "storage.type.function.mpro"
    },
    {
      "name": "meta.function-call.mpro",
      "begin": "(?:\\.)?([[:alpha:]_][[:alnum:]_]*)\\s*(?=(\\())",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.call.mpro"
        },
        "2": {
          "name": "punctuation.definition.arguments.begin.mpro"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.arguments.end.mpro"
        }
      },
      "patterns": [
        {
          "contentName": "meta.function-call.arguments.mpro",
          "begin": "(\\()",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.arguments.begin.mpro"
            }
          },
          "end": "(?=(\\)))",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.arguments.end.mpro"
            }
          },
          "patterns": [
            {
              "include": "#keyword_arguments"
            },
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    {
      "include": "#function_builtin"
    }
  ],
  "repository": {
    "brace_block": {
      "name": "meta.block.mpro",
      "begin": "\\{",
      "end": "\\}",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.block.begin.bracket.curly.mpro"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.block.end.bracket.curly.mpro"
        }
      },
      "patterns": [
        {
          "include": "$self"
        }
      ]
    },
    "bracket_block": {
      "name": "meta.block.mpro",
      "begin": "\\[",
      "end": "\\]",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.block.begin.bracket.square.mpro"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.block.end.bracket.square.mpro"
        }
      },
      "patterns": [
        {
          "include": "$self"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.block.documentation.mpro",
          "begin": "/\\*\\*(?!/)",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.mpro"
            }
          },
          "end": "\\*/"
        },
        {
          "name": "comment.block.mpro",
          "begin": "\\/\\*",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.mpro"
            }
          },
          "end": "\\*\\/"
        },
        {
          "name": "comment.line.double-slash.mpro",
          "match": "(\\/\\/).*$\\n?",
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.mpro"
            }
          }
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.boolean.true.mpro",
          "match": "\\btrue\\b"
        },
        {
          "name": "constant.language.boolean.false.mpro",
          "match": "\\bfalse\\b"
        },
        {
          "name": "constant.language.null.mpro",
          "match": "\\bnull\\b"
        }
      ]
    },
    "function_builtin": {
      "patterns": [
        {
          "name": "support.function.mpro",
          "match": "\\b(read|write|draw|print|drawflush|printflush|getlink|control|radar|sensor|ubind|ucontrol|uradar|ulocate)\\b"
        }
      ]
    },
    "at_constants": {
      "patterns": [
        {
          "name": "variable.language.builtin.mlog",
          "match": "@(?:links|time|unit|ipt|this|thisx|thisy|mapw|maph|counter)\\b"
        },
        {
          "name": "variable.language.units.mlog",
          "match": "(?x)\n@(?:alpha|beta|gamma|\n    dagger|mace|crawler|atrax|spiroct|arkyid|toxopid|\n    flare|horizon|zenith|antumbra|eclipse|fortress|\n    mono|poly|mega|quad|oct|risso|\n    minke|bryde|sei|omura|scepter|reign|\n    nova|pulsar|quasar|vela|corvus)\n\\b"
        },
        {
          "name": "variable.language.block.mlog",
          "match": "(?x)\n@(?:graphite-press|multi-press|silicon-smelter|silicon-crucible|kiln|plastanium-compressor|phase-weaver|alloy-smelter|cryofluid-mixer|\n    pyratite-mixer|blast-mixer|melter|separator|disassembler|spore-press|pulverizer|coal-centrifuge|incinerator|\n    copper-wall(?:-large)?|titanium-wall(?:-large)?|plastanium-wall(?:-large)?|thorium-wall(?:-large)?|\n    phase-wall(?:-large)?|surge-wall(?:-large)?|door(?:-large)?|scrap-wall(?:-(?:large|huge|gigantic))?|thruster|\n    mender|mend-projector|overdrive-projector|overdrive-dome|force-projector|shock-mine|\n    conveyor|titanium-conveyor|plastanium-conveyor|armored-conveyor|junction|bridge-conveyor|phase-conveyor|sorter|inverted-sorter|router|distributor|\n    overflow-gate|underflow-gate|mass-driver|payload-conveyor|payload-router|\n    mechanical-pump|rotary-pump|thermal-pump|conduit|pulse-conduit|plated-conduit|liquid-router|liquid-tank|liquid-junction|bridge-conduit|phase-conduit|\n    power-node|power-node-large|surge-tower|diode|battery|battery-large|combustion-generator|thermal-generator|steam-generator|differential-generator|rtg-generator|solar-panel|solar-panel-large|thorium-reactor|impact-reactor|\n    mechanical-drill|pneumatic-drill|laser-drill|blast-drill|water-extractor|cultivator|oil-extractor|\n    core-shard|core-foundation|core-nucleus|vault|container|unloader|\n    duo|scatter|scorch|hail|wave|lancer|arc|parallax|swarmer|salvo|segment|tsunami|fuse|ripple|cyclone|foreshadow|spectre|meltdown|\n    command-center|ground-factory|air-factory|naval-factory|additive-reconstructor|multiplicative-reconstructor|exponential-reconstructor|tetrative-reconstructor|repair-point|resupply-point|\n    power-source|power-void|item-source|item-void|liquid-source|liquid-void|\n    illuminator|launch-pad(?:-large)?|interplanetary-accelerator|message|switch|micro-processor|logic-processor|hyper-processor|memory-cell|memory-bank|logic-display|large-logic-display)\n\\b",
          "comment": "That is a lot... wow... I guess these are technically addressable, albeit never recognized that they can be\nList of all items that are defined in quotes except legacy and experimental items\nFrom: 'https://github.com/Anuken/Mindustry/blob/master/core/src/mindustry/content/Blocks.java'\nItems in the 'item' and 'item-large' are combined in a single check so 'item' doesn not match 'item-large' by mistake\n# If you're reading this, that means you're pretty cool!"
        },
        {
          "name": "variable.language.item.mlog",
          "match": "@(?:scrap|copper|lead|graphite|coal|titanium|thorium|silicon|plastanium|phase-fabric|surge-alloy|spore-pod|sand|blast-compound|pyratite|metaglass)\\b"
        },
        {
          "name": "variable.language.liquid.mlog",
          "match": "@(?:water|slag|oil|cryofluid)"
        },
        {
          "name": "variable.language.special.mlog",
          "match": "@(?:solid|air)"
        },
        {
          "name": "variable.language.sensor.mlog",
          "match": "(?x)\n@(?:totalItems|firstItem|totalLiquids|totalPower|itemCapacity|liquidCapacity|powerCapacity|\n    powerNetStored|powerNetCapacity|powerNetIn|powerNetOut|ammo|ammoCapacity|health|\n    maxHealth|heat|efficiency|rotation|x|y|shootX|shootY|shooting|mineX|mineY|mining|\n    team|type|flag|controlled|commanded|name|config|payloadCount|payloadType)\n\\b"
        }
      ]
    },
    "illegal_names": {
      "name": "invalid.illegal.name.mpro",
      "match": "\\b(true|false|module|function|if|else|let)\\b"
    },
    "keyword_arguments": {
      "comment": "Incorporated from PythonImproved grammar",
      "begin": "\\b([[:alpha:]_][[:alnum:]_]*)\\s*(=)(?!=)",
      "beginCaptures": {
        "1": {
          "name": "variable.parameter.function.keyword.mpro"
        },
        "2": {
          "name": "keyword.operator.assignment.mpro"
        }
      },
      "end": "\\s*(?:(,)|(?=\\)))",
      "endCaptures": {
        "1": {
          "name": "punctuation.separator.parameters.mpro"
        }
      },
      "patterns": [
        {
          "include": "$self"
        }
      ]
    },
    "let_keyword": {
      "name": "keyword.control.mpro",
      "match": "\\b(let)\\b"
    },
    "numbers": {
      "patterns": [
        {
          "comment": "Ummm... why do we have three of these? This is one...",
          "name": "constant.numeric.float.mpro",
          "match": "\\b(?i:(\\d+\\.\\d*(e[\\-\\+]?\\d+)?))(?=[^[:alpha:]_])"
        },
        {
          "comment": "This is two...",
          "name": "constant.numeric.float.mpro",
          "match": "(?<=[^[:alnum:]_])(?i:(\\.\\d+(e[\\-\\+]?\\d+)?))"
        },
        {
          "comment": "And this is three...",
          "name": "constant.numeric.float.mpro",
          "match": "\\b(?i:(\\d+e[\\-\\+]?\\d+))"
        },
        {
          "name": "constant.numeric.integer.decimal.mpro",
          "match": "\\b([1-9]+[0-9]*|0)"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.decrement.mpro",
          "match": "--"
        },
        {
          "name": "keyword.operator.increment.mpro",
          "match": "\\+\\+"
        },
        {
          "name": "keyword.operator.assignment.compound.mpro",
          "match": "%=|\\+=|-=|\\*=|(?<!\\()/=|\\*\\*=|//="
        },
        {
          "name": "keyword.operator.assignment.compound.bitwise.mpro",
          "match": "&=|\\^=|<<=|>>=|\\|="
        },
        {
          "name": "keyword.operator.bitwise.shift.mpro",
          "match": "<<|>>"
        },
        {
          "name": "keyword.operator.comparison.mpro",
          "match": "!=|<=|>=|==|<|>"
        },
        {
          "name": "keyword.operator.logical.mpro",
          "match": "&&|!|\\|\\|"
        },
        {
          "name": "keyword.operator.bitwise.mpro",
          "match": "&|\\||\\^|~"
        },
        {
          "name": "keyword.operator.assignment.mpro",
          "match": "="
        },
        {
          "name": "keyword.operator.mpro",
          "match": "%|\\*|/|-|\\+|\\*\\*|//"
        }
      ]
    },
    "paren_block": {
      "name": "meta.block.parens.mpro",
      "begin": "\\(",
      "end": "\\)",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.parens.begin.bracket.round.mpro"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parens.end.bracket.round.mpro"
        }
      },
      "patterns": [
        {
          "include": "$self"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.single.mpro",
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.mpro"
            }
          },
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.mpro"
            }
          },
          "patterns": [
            {
              "name": "constant.character.escape.mpro",
              "match": "\\\\[nt'\"]"
            }
          ]
        },
        {
          "name": "string.quoted.double.mpro",
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.mpro"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.mpro"
            }
          },
          "patterns": [
            {
              "name": "constant.character.escape.mpro",
              "match": "\\\\[nt'\"]"
            }
          ]
        }
      ]
    }
  }
}
