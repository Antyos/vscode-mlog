{
  "name": "Mindustry Logic",
  "fileTypes": [
    "mlog"
  ],
  "scopeName": "source.mlog",
  "uuid": "235046A8-4282-11EB-B378-0242AC130002",
  "keyEquivalent": "^~S",
  "patterns": [
    {
      "include": "#commands"
    },
    {
      "include": "#global_constants"
    },
    {
      "include": "#jump_conditions"
    },
    {
      "include": "#operations"
    },
    {
      "include": "#jump_labels"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#string"
    }
  ],
  "repository": {
    "at_names": {
      "comment": "Internal variables with pre-defined meaning, in the format of @var-name See https://github.com/Anuken/Mindustry/blob/master/core/src/mindustry/logic/GlobalConstants.java",
      "name": "variable.language.at_name.mlog",
      "match": "(@)([A-Za-z][[:alnum:]_\\-]*)\\b",
      "captures": {
        "1": {
          "name": "punctuation.definition.at_sign.mlog"
        },
        "2": {
          "patterns": [
            {
              "name": "variable.language.builtin.mlog",
              "match": "(?<=@)(?:links|time|unit|ipt|this|thisx|thisy|mapw|maph|counter|tick)"
            },
            {
              "include": "#blocks"
            },
            {
              "include": "#items"
            },
            {
              "include": "#liquids"
            },
            {
              "name": "variable.language.special.mlog",
              "match": "(?<=@)(?:solid|air)"
            },
            {
              "include": "#sensor"
            },
            {
              "include": "#units"
            },
            {
              "name": "variable.language.counts.mlog",
              "match": "(?<=@)(?:block|unit|item|liquid)Count"
            },
            {
              "name": "variable.language.controlled.mlog",
              "match": "(?<=@)ctrl(?:Processor|Player|Formation)"
            },
            {
              "name": "invalid.deprecated.mlog",
              "match": "(?<=@)commanded\\b",
              "comment": "@commanded was deprecated in favor of @controlled"
            }
          ]
        }
      },
      "repository": {
        "blocks": {
          "comment": "List of all items that are defined in quotes except legacy and experimental\nitems. Items in the 'item' and 'item-large' are combined in a single check so\n'item' does not match in 'item-large' by mistake\nSee https://github.com/Anuken/Mindustry/blob/master/core/src/mindustry/content/Blocks.java",
          "patterns": [
            {
              "name": "variable.language.block.crafting.mlog",
              "match": "(?x)\n(?<=@)(?:\n  graphite-press|multi-press|silicon-smelter|silicon-crucible|kiln|\n  plastanium-compressor|phase-weaver|alloy-smelter|cryofluid-mixer|\n  pyratite-mixer|blast-mixer|melter|separator|disassembler|\n  spore-press|pulverizer|coal-centrifuge|incinerator\n)"
            },
            {
              "name": "variable.language.block.defense.mlog",
              "match": "(?x)\n(?<=@)(?:\n  copper-wall(?:-large)?|titanium-wall(?:-large)?|\n  plastanium-wall(?:-large)?|thorium-wall(?:-large)?|\n  phase-wall(?:-large)?|surge-wall(?:-large)?|door(?:-large)?|\n  scrap-wall(?:-(?:large|huge|gigantic))?|thruster|mender|\n  mend-projector|overdrive-projector|overdrive-dome|force-projector|\n  shock-mine\n)"
            },
            {
              "name": "variable.language.block.distribution.mlog",
              "match": "(?x)\n(?<=@)(?:\n    (?:(?:titanium|plastanium|armored|bridge|phase)-)?conveyor|junction|\n    (?:intverted-)?sorter|router|distributor|(?:over|under)flow-gate|\n    mass-driver\n)"
            },
            {
              "name": "variable.language.block.liquid.mlog",
              "match": "(?x)\n(?<=@)(?:\n  (?:mechanical|rotary|thermal)-pump|\n  (?:(?:pulse|plated|bridge|phase)-)?conduit|\n  liquid-(?:router|tank|junction)\n)"
            },
            {
              "name": "variable.language.block.power.mlog",
              "match": "(?x)\n(?<=@)(?:\n  power-node(?:-large)?|surge-tower|diode|battery(?:-large)?|\n  (?:combustion|thermal|steam|differential|rtg)-generator|\n  solar-panel(?:-large)?|(?:thorium|impact)-reactor\n)"
            },
            {
              "name": "variable.language.block.production.mlog",
              "match": "(?x)\n(?<=@)(?:\n  (?:mechanical|pneumatic|laser|blast)-drill|water-extractor|\n  cultivator|oil-extractor\n)"
            },
            {
              "name": "variable.language.block.storage.mlog",
              "match": "(?<=@)(?:core-(?:shard|foundation|nucleus)|vault|container|unloader)"
            },
            {
              "name": "variable.language.block.turrets.mlog",
              "match": "(?x)\n(?<=@)(?:\n  duo|scatter|scorch|hail|wave|lancer|arc|parallax|swarmer|salvo|\n  segment|tsunami|fuse|ripple|cyclone|foreshadow|spectre|meltdown\n)"
            },
            {
              "name": "variable.language.block.units.mlog",
              "match": "(?x)\n(?<=@)(?:\n  command-center|(?:ground|air|naval)-factory|\n  (?:additive|multiplicative|exponential|tetrative)-reconstructor|\n  repair-point|resupply-point\n)"
            },
            {
              "name": "variable.language.block.payloads.mlog",
              "match": "(?<=@)(?:payload-(?:conveyor|router|propulsion-tower))"
            },
            {
              "name": "variable.language.block.sandbox.mlog",
              "match": "(?<=@)(?:(?:power|item|liquid|payload)-(?:source|void)|illuminator)"
            },
            {
              "name": "variable.language.block.campaign.mlog",
              "match": "(?<=@)(?:launch-pad|interplanetary-accelerator)"
            },
            {
              "name": "variable.language.block.logic.mlog",
              "match": "(?x)\n(?<=@)(?:\n  message|switch|(?:micro|logic|hyper)-processor|memory-(?:cell|bank)|\n  (?:large-)?logic-display\n)"
            }
          ]
        },
        "items": {
          "name": "variable.language.item.mlog",
          "match": "(?x)\n(?<=@)(?:\n  scrap|copper|lead|graphite|coal|titanium|thorium|silicon|plastanium|\n  phase-fabric|surge-alloy|spore-pod|sand|blast-compound|pyratite|metaglass\n)"
        },
        "liquids": {
          "name": "variable.language.liquid.mlog",
          "match": "(?<=@)(?:water|slag|oil|cryofluid)"
        },
        "sensor": {
          "comment": "See https://github.com/Anuken/Mindustry/blob/master/core/src/mindustry/logic/LAccess.java",
          "name": "variable.language.sensor.mlog",
          "match": "(?x)\n(?<=@)(?:\n  totalItems|firstItem|totalLiquids|totalPower|itemCapacity|liquidCapacity|\n  powerCapacity|powerNetStored|powerNetCapacity|powerNetIn|powerNetOut|ammo|\n  ammoCapacity|health|maxHealth|heat|efficiency|progress|timescale|rotation|\n  x|y|shootX|shootY|size|dead|range|shooting|boosting|mineX|mineY|mining|team|\n  type|flag|controlled|controller|commanded|name|payloadCount|payloadType|\n  enabled|shoot|shootp|config|color\n)"
        },
        "units": {
          "name": "variable.language.units.mlog",
          "match": "(?x)\n(?<=@)(?:\n  alpha|beta|gamma|\n  dagger|mace|crawler|atrax|spiroct|arkyid|toxopid|\n  flare|horizon|zenith|antumbra|eclipse|fortress|\n  mono|poly|mega|quad|oct|risso|\n  minke|bryde|sei|omura|scepter|reign|\n  nova|pulsar|quasar|vela|corvus\n)"
        }
      }
    },
    "commands": {
      "comment": "See https://github.com/Anuken/Mindustry/blob/master/core/src/mindustry/logic/LStatements.java",
      "patterns": [
        {
          "name": "support.function.mlog",
          "match": "(?x)\n\\b(\n  read|write|draw|print|drawflush|printflush|getlink|control|radar|sensor|\n  ubind|ucontrol|uradar|ulocate|wait|lookup\n)\\b"
        },
        {
          "name": "keyword.control.end.mlog",
          "match": "\\bend\\b"
        },
        {
          "name": "keyword.control.jump.mlog",
          "match": "\\bjump\\b"
        },
        {
          "name": "keyword.control.set.mlog",
          "match": "\\bset\\b"
        },
        {
          "name": "keyword.control.op.mlog",
          "match": "\\bop\\b"
        },
        {
          "name": "keyword.control.noop.mlog",
          "match": "\\bnoop\\b"
        }
      ]
    },
    "comments": {
      "name": "comment.line.number-sign.mlog",
      "match": "(#+).*$",
      "captures": {
        "1": {
          "name": "punctuation.definition.comment.mlog"
        }
      }
    },
    "global_constants": {
      "patterns": [
        {
          "include": "#at_names"
        },
        {
          "name": "constant.language.boolean.true.mlog",
          "match": "\\btrue\\b"
        },
        {
          "name": "constant.language.boolean.false.mlog",
          "match": "\\bfalse\\b"
        },
        {
          "name": "constant.language.null.mlog",
          "match": "\\bnull\\b"
        },
        {
          "name": "constant.language.the-end.mlog",
          "match": "\\bthe end\\b",
          "comment": "I'm not really sure why this is here, but it's listed here:\nhttps://github.com/Anuken/Mindustry/blob/master/core/src/mindustry/logic/GlobalConstants.java#L28"
        }
      ]
    },
    "jump_conditions": {
      "comment": "See https://github.com/Anuken/Mindustry/blob/master/core/src/mindustry/logic/ConditionOp.java",
      "name": "constant.language.jump-condition.mlog",
      "match": "\\b(?:equal|notEqual|strictEqual|lessThan|lessThanEq|greaterThan|greaterThanEq|always)\\b"
    },
    "jump_labels": {
      "name": "entity.name.function.mlog",
      "match": "\\b([[:alnum:]_]+)(:)(?=\\s|$)",
      "captures": {
        "1": {
          "name": "entity.name.function.mlog"
        },
        "2": {
          "name": "punctuation.separator.colon.mlog"
        }
      }
    },
    "numbers": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.mlog",
          "match": "-"
        },
        {
          "name": "constant.numeric.integer.hexadecimal.python",
          "match": "\\b(?i:(0x\\h+))"
        },
        {
          "name": "constant.numeric.integer.binary.python",
          "match": "\\b(?i:(0b[01]+))"
        },
        {
          "comment": "Ummm... why do we have three of these? This is one...",
          "name": "constant.numeric.float.mlog",
          "match": "\\b(?i:(\\d+\\.\\d*(e[\\-\\+]?\\d+)?))(?=[^[:alpha:]_])"
        },
        {
          "comment": "This is two...",
          "name": "constant.numeric.float.mlog",
          "match": "(?<=[^[:alnum:]_])(?i:(\\.\\d+(e[\\-\\+]?\\d+)?))"
        },
        {
          "comment": "And this is three...",
          "name": "constant.numeric.float.mlog",
          "match": "\\b(?i:(\\d+e[\\-\\+]?\\d+))"
        },
        {
          "name": "constant.numeric.integer.decimal.mlog",
          "match": "\\b([1-9]+[0-9]*|0)"
        }
      ]
    },
    "operations": {
      "comment": "See https://github.com/Anuken/Mindustry/blob/master/core/src/mindustry/logic/LogicOp.java",
      "patterns": [
        {
          "name": "constant.language.operation.mlog",
          "match": "(?x)\n\\b(?:\n  add|sub|mul|div|idiv|mod|pow|equal|notEqual|strictEqual|land|lessThan|\n  lessThanEq|greaterThan|greaterThanEq|shl|shr|or|and|xor|not|max|min|\n  angle|len|noise|abs|log|log10|sin|cos|tan|asin|acos|atan|floor|ceil|\n  sqrt|rand\n)\\b",
          "comment": "Does not include comparisons covered by"
        },
        {
          "name": "invalid.deprecated.operation.mlog",
          "match": "\\b(?:atan2|dst)\\b",
          "comment": "`atan2` and `dst` were removed in favor of `angle` and `len`, respectively"
        }
      ]
    },
    "string": {
      "name": "string.quoted.double.mlog",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.mlog"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.mlog"
        }
      }
    }
  }
}
