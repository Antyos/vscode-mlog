{
  "name": "Mindustry Logic",
  "fileTypes": [
    "mlog"
  ],
  "scopeName": "source.mlog",
  "uuid": "235046A8-4282-11EB-B378-0242AC130002",
  "keyEquivalent": "^~S",
  "patterns": [
    {
      "include": "#commands"
    },
    {
      "include": "#global_constants"
    },
    {
      "include": "#jump_conditions"
    },
    {
      "include": "#operations"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#string"
    }
  ],
  "repository": {
    "commands": {
      "patterns": [
        {
          "name": "support.function.mlog",
          "match": "\\b(read|write|draw|print|drawflush|printflush|getlink|control|radar|sensor|ubind|ucontrol|uradar|ulocate)\\b"
        },
        {
          "name": "keyword.control.end.mlog",
          "match": "\\bend\\b"
        },
        {
          "name": "keyword.control.jump.mlog",
          "match": "\\bjump\\b"
        },
        {
          "name": "keyword.control.set.mlog",
          "match": "\\bset\\b"
        },
        {
          "name": "keyword.control.op.mlog",
          "match": "\\bop\\b"
        },
        {
          "name": "keyword.control.noop.mlog",
          "match": "\\bnoop\\b"
        }
      ]
    },
    "comments": {
      "name": "comment.line.number-sign.mlog",
      "match": "(#+).*$",
      "captures": {
        "1": {
          "name": "punctuation.definition.comment.mlog"
        }
      }
    },
    "global_constants": {
      "patterns": [
        {
          "name": "variable.language.builtin.mlog",
          "match": "@(?:links|time|unit|ipt|this|thisx|thisy|mapw|maph|counter)\\b"
        },
        {
          "name": "variable.language.units.mlog",
          "match": "(?x)\n@(?:alpha|beta|gamma|\n    dagger|mace|crawler|atrax|spiroct|arkyid|toxopid|\n    flare|horizon|zenith|antumbra|eclipse|fortress|\n    mono|poly|mega|quad|oct|risso|\n    minke|bryde|sei|omura|scepter|reign|\n    nova|pulsar|quasar|vela|corvus)\n\\b"
        },
        {
          "name": "variable.language.item.mlog",
          "match": "@(?:scrap|copper|lead|graphite|coal|titanium|thorium|silicon|plastanium|phase-fabric|surge-alloy|spore-pod|sand|blast-compound|pyratite|metaglass)\\b"
        },
        {
          "name": "variable.language.liquid.mlog",
          "match": "@(?:water|slag|oil|cryofluid)"
        },
        {
          "name": "variable.language.block.mlog",
          "match": "(?x)\n@(?:oreCopper|oreLead|oreScrap|oreCoal|oreTitanium|oreThorium|\n    siliconSmelter|siliconCrucible|kiln|graphitePress|plastaniumCompressor|multiPress|phaseWeaver|surgeSmelter|pyratiteMixer|blastMixer|cryofluidMixer|\n    melter|separator|disassembler|sporePress|pulverizer|incinerator|coalCentrifuge|\n    powerSource|powerVoid|itemSource|itemVoid|liquidSource|liquidVoid|illuminator|\n    copperWall|copperWallLarge|titaniumWall|titaniumWallLarge|plastaniumWall|plastaniumWallLarge|thoriumWall|thoriumWallLarge|door|doorLarge|\n    phaseWall|phaseWallLarge|surgeWall|surgeWallLarge|mender|mendProjector|overdriveProjector|overdriveDome|forceProjector|shockMine|\n    scrapWall|scrapWallLarge|scrapWallHuge|scrapWallGigantic|thruster|\n    conveyor|titaniumConveyor|plastaniumConveyor|armoredConveyor|distributor|junction|itemBridge|phaseConveyor|sorter|invertedSorter|router|\n    overflowGate|underflowGate|massDriver|payloadConveyor|payloadRouter|\n    mechanicalPump|rotaryPump|thermalPump|conduit|pulseConduit|platedConduit|liquidRouter|liquidTank|liquidJunction|bridgeConduit|phaseConduit|\n    combustionGenerator|thermalGenerator|steamGenerator|differentialGenerator|rtgGenerator|solarPanel|largeSolarPanel|thoriumReactor|\n    impactReactor|battery|batteryLarge|powerNode|powerNodeLarge|surgeTower|diode|\n    mechanicalDrill|pneumaticDrill|laserDrill|blastDrill|waterExtractor|oilExtractor|cultivator|\n    coreShard|coreFoundation|coreNucleus|vault|container|unloader|\n    duo|scatter|scorch|hail|arc|wave|lancer|swarmer|salvo|fuse|ripple|cyclone|foreshadow|spectre|meltdown|segment|parallax|tsunami|\n    commandCenter|\n    groundFactory|airFactory|navalFactory|\n    additiveReconstructor|multiplicativeReconstructor|exponentialReconstructor|tetrativeReconstructor|\n    repairPoint|resupplyPoint|\n    message|switchBlock|microProcessor|logicProcessor|hyperProcessor|largeLogicDisplay|logicDisplay|memoryCell|memoryBank|\n    launchPad|launchPadLarge|interplanetaryAccelerator)\n\\b",
          "comment": "That is a lot... wow... I guess these are technically addressable, albeit never recognized that they can be"
        },
        {
          "name": "variable.language.special.mlog",
          "match": "@(?:solid|air)"
        },
        {
          "name": "variable.language.sensor.mlog",
          "match": "(?x)\n@(?:totalItems|firstItem|totalLiquids|totalPower|itemCapacity|liquidCapacity|powerCapacity|\n    powerNetStored|powerNetCapacity|powerNetIn|powerNetOut|ammo|ammoCapacity|health|\n    maxHealth|heat|efficiency|rotation|x|y|shootX|shootY|shooting|mineX|mineY|mining|\n    team|type|flag|controlled|commanded|name|config|payloadCount|payloadType)\n\\b"
        },
        {
          "name": "constant.language.boolean.true.mlog",
          "match": "\\btrue\\b"
        },
        {
          "name": "constant.language.boolean.false.mlog",
          "match": "\\bfalse\\b"
        },
        {
          "name": "constant.language.null.mlog",
          "match": "\\bnull\\b"
        },
        {
          "name": "constant.language.the-end.mlog",
          "match": "\\bthe end\\b",
          "comment": "I'm not really sure why this is here, but it's in 'https://github.com/Anuken/Mindustry/blob/master/core/src/mindustry/logic/GlobalConstants.java'"
        }
      ]
    },
    "jump_conditions": {
      "name": "constant.language.jump-condition.mlog",
      "match": "\\b(?:equal|notEqual|lessThan|lessThanEq|greaterThan|greaterThanEq|always)\\b"
    },
    "numbers": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.mlog",
          "match": "-"
        },
        {
          "name": "constant.numeric.integer.hexadecimal.python",
          "match": "\\b(?i:(0x\\h+))"
        },
        {
          "name": "constant.numeric.integer.binary.python",
          "match": "\\b(?i:(0b[01]+))"
        },
        {
          "comment": "Ummm... why do we have three of these? This is one...",
          "name": "constant.numeric.float.mlog",
          "match": "\\b(?i:(\\d+\\.\\d*(e[\\-\\+]?\\d+)?))(?=[^[:alpha:]_])"
        },
        {
          "comment": "This is two...",
          "name": "constant.numeric.float.mlog",
          "match": "(?<=[^[:alnum:]_])(?i:(\\.\\d+(e[\\-\\+]?\\d+)?))"
        },
        {
          "comment": "And this is three...",
          "name": "constant.numeric.float.mlog",
          "match": "\\b(?i:(\\d+e[\\-\\+]?\\d+))"
        },
        {
          "name": "constant.numeric.integer.decimal.mlog",
          "match": "\\b([1-9]+[0-9]*|0)"
        }
      ]
    },
    "operations": {
      "name": "constant.language.operation.mlog",
      "match": "\\b(?:add|sub|mul|div|idiv|mod|pow|shl|shr|or|and|xor|not|max|min|atan2|dst|noise|abs|log|log10|sin|cos|tan|floor|ceil|sqrt|rand)\\b",
      "comment": "Does not include comparisons covered by"
    },
    "string": {
      "name": "string.quoted.double.mlog",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.mlog"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.mlog"
        }
      }
    }
  }
}
